Control Plane Policing:

Task0: prevent icmp overload:
config t
ip access-list extended PING
  permit icmp any any
!
class-map CMPING
  match access-group name PING
!
no policy-map PMPING
policy-map PMPING
  class CMPING
  !limit to 8bps and drop exceeding
  police 8000 conform-action transmit exceed-action drop
  exit
!
control-plane
 service-policy input PMPING
 exit
do sh policy-map control-plane


ANOTHERactual:

config t
no access-list 100
access-list 100 permit icmp any any
!
no class-map ICMP
class-map ICMP
 match access-group 100
 exit
!
no policy-map ICMP-POLICY
policy-map ICMP-POLICY
 class ICMP
  police 8000 conform-action transmit exceed-action drop
  exit
 exit
 exit
!
control-plane
 service-policy input ICMP-POLICY
 DO  sh policy-map control-plane



TASK1: 
pre-config:
config t
ip dns server
ip finger
ip http server
ip http secure-server


config t
!ac
ip access-list extended TELNET
 permit tcp any any eq 23
 exit
ip access-list extended SSH
 permit tcp any any eq 22
 exit
ip access-list extended ICMP
 permit icmp any any
 exit
!cm
class-map match-all CMTEL
 match access-group name TELNET
 exit
class-map match-all CMSSH
 match access-group name SSH
 exit
class-map match-all CMICMP
 match access-group name ICMP
 exit
!PM
policy-map PMCOPP
 !pass ALL TELNET TRAFFIC
 class CMTEL
  police 8000 conform-action drop exceed-action drop
 !limit ALL SSH TRAFFIC
 class CMSSH
  police 500000 conform-action transmit exceed-action transmit
 !set ping at 10pps, confrom to transmit, exceed to drop
 class CMICMP
  police rate 10 pps conform-action transmit exceed-action drop

class class-default
 police 12000 conform-action transmit exceed-action transmit
 exit
!SP
control-plane
 service-policy input PMCOPP
END
show class-map
show policy-map
show policy-map control-plane

TASK2:

User
write a cisco configuration for COPP that will totally block http 
traffic but allow telnet and ssh traffic using one service-policy only

config t
! Define an access control list (ACL) to match HTTP traffic
access-list 101 deny tcp any any eq 443
access-list 101 permit ip any any

! Create a class map to match the ACL
class-map match-all HTTPS-Traffic
  match access-group 101

! Create a policy map for CoPP
no policy-map Control-Plane-Policing
policy-map Control-Plane-Policing
  class HTTPS-Traffic
    police 80000 1500 1500 conform-action transmit exceed-action drop violate-action drop
    exit
! Apply the CoPP policy to the control plane
control-plane
 service-policy input Control-Plane-Policing
 exit

CONFIG T
no logging console
Int Gi 2
no shut
ip add 192.168.102.11 255.255.255.0
!@telnet use secureCRT: telnet 192.168.108.5
!in SEcureCRT, Paste This:
config t
IP ROUTE 0.0.0.0  0.0.0.0 208.8.8.2
ip name-server 8.8.8.8 1.1.1.1
ip domain lookup
int gi 1
no shut
ip add 208.8.8.11 255.255.255.0
int gi 3
no shut
ip add 192.168.103.11 255.255.255.0
line vty 0 14
 transport input all
 exec-timeout 0 0
do sh ip int brief

PC1:
config t
line vty 0 14
 transport input all
 exec-timeout 0 0
do sh ip int brief
interface GigabitEthernet2
 no shut
 ip address 192.168.102.100 255.255.255.0
 negotiation auto
 no mop enabled
 no mop sysid
end

TBacl:

step1: set time
conf t
 clock timezone PHT 8
end

step2:
conf t
 time-range BUSINESS-HOURS
  periodic weekdays 8:00 to 18:00
end
show time-range BUSINESS-HOURS


step3:
conf t
 no  ip access-list extended TB-HTTP
 ip access-list extended TB-HTTP
  remark Permit HTTP and during business hours
  permit tcp any any eq 80 time-range BUSINESS-HOURS
  permit icmp any any time-range BUSINESS-HOURS
  remark Optional: still allow DNS if you need it for tests
  !permit udp 192.168.0.0 0.0.255.255 any eq 53
  remark Drop everything else and log
  deny   ip any any log
end

step4:
conf t
 interface GigabitEthernet1
    no ip access-group TB-HTTP out
 interface GigabitEthernet2
    no ip access-group TB-HTTP out
	ip access-group TB-HTTP in
end



clock set 01:15:00 21 Oct 2025
clock set 09:15:00 21 Oct 2025
show clock
show time-range BUSINESS-HOURS

ping 10.3.3.107
https://github.com/rivancorp/devop

task1: who wants to 180k to 350k/month?
AI + ML

TASK1: Prepare for automation:
@apps1a: devices with "ZeroDayConfig:"
config t
no logging console
line vty 0 14
 transport input all
 exec-timeout 0 0
int gi 1
 no shut
 ip add 192.168.108.6 255.255.255.0
 do wr

task2: install vscode extensions to make your programming heaven:

PythonForNetworkEngs
GitHub Copilot
Python Snippets
AREPL for python
Better Comments
Python Docstring Generator
Python Indent
Python Test Explorer

#upgrade your pip installer:
py -m pip install --upgrade pip
py -m pip install netmiko

TASK3: ENCOR CCNP LAB: NETFLOW LAB 1of3:
NetFlow tracks information such as:

* Source and destination IP addresses
* Source and destination ports
* IP protocol
* Type of service (ToS)
* Input and output interfaces
* Packet and byte counts
* Timestamps for the start and end of the flow

TASK4: HOW TO IMPLEMENT NETFLOW COLLECTION:

NETFLOW COLLECTION:
Components of NetFlow:

* NetFlow Exporter: Embedded in routers or switches to collect flow information and export it. apps1, and apps2  192.168.108.5//.6
* NetFlow Collector: A server that receives flow data from exporters and stores it for analysis. windows server: 192.168.108.1
* NetFlow Analyzer: Software that interprets and presents NetFlow data for network administrators. OPENSOURCE NETFLOW NTOPng:  192.168.108.2

ExamLab1: Create a default netflow exporter using Defualt collection:
APPS1: 
config t
flow exporter MyFlowExporter
 destination 192.168.108.1
 transport udp 2055
 export-protocol netflow-v9
end

NETFLOW LAB2: LEARN TO CREATE YOUR OWN NETFLOW configs:

stepONE: CONFIGURE AND VERIFY FLEXIBLE[ikaw nag custom] NETFLOW
APP1:
config t
	Flow record CCNPENCOR-CUSTOM-OUT
   	description CustomFlowforEncorLAB
	match ipv4 destination address
	match transport destination-port
	collect counter bytes
	collect counter packets
end
show flow record CCNPENCOR-CUSTOM-OUT

STEPtwo: CReate Flow Exporter:
config t
	flow exporter CCNP8-COLLECTOR-HOST 
        destination 192.168.108.1
	export-protocol netflow-v9 
        transport UDP 2055
	end
show flow exporter CCNP8-COLLECTOR-HOST

Step 3. Create Flow Monitor and associate Flow Records 
and Flow Exporters with it.  
config t
	flow monitor CCNP8-INBOUND-MONITOR
	record netflow ipv4 original-input 
	cache timeout active 30
	exporter CCNP8-COLLECTOR-HOST
	exit
        flow monitor CCNP8-OUTBOUND-MONITOR
	record CCNPENCOR-CUSTOM-OUT
	cache timeout active 30
	exporter CCNP8-COLLECTOR-HOST 
	exit
show flow monitor 

Step 4. Configure the appropriate interface:
config t
	interface gigabit 1
	ip flow monitor CCNP8-INBOUND-MONITOR input 
	ip flow monitor CCNP8-OUTBOUND-MONITOR output 

\\10.3.3.107\

task1: install netflow Collector on Winserver:
install all Ntopfiles

services.msc:
redis server
ntop
nprobe

http://localhost:3000

TASK1: configure netflow on cisco APPS1
to send netflow data to collector:windows


APPS1#show flow record 
flow record netflow-original:
  Description:        Traditional IPv4 input NetFlow with origin ASs
  No. of users:       0

TASK1: Learn create custom flows:
config t
	flow record CUSTOM-ENCORFLOW
	description NETFLOWnaGAWAKOmagIsa
 	match ipv4 destination address
	match transport destination-port
	collect counter bytes
	collect counter packets
	
TEST2: SEND flow records to windows Collector:
       mag sumbong sa windows:
config t
	flow exporter MyFlowExporter
        destination 192.168.108.2
        transport udp 2055
        export-protocol netflow-v9    

Task3: MAKE ROUTER VERY BUSY:
1. NETWORK TIME PROTOCOL:
config t
ip route 0.0.0.0  0.0.0.0  192.168.108.2
do ping 1.1.1.1
do ping 216.239.35.12
ntp server 216.239.35.12
end

task4: python for network Engineers:
GitHub Copilot
autoDocstring – Python Docstring 
Python Snippets
AREPL for python
Better Comments
Python Docstring Generator
Python Indent
Python Test Explorer

py -m pip install --upgrade pip

py -m pip install netmiko

TASK4: REAL WORLD CCNP HSRP:
         1.1.1.1/ 8.8.8.8



GI1:108.5                        GI1:108.6
APPS1                             APPS2
GI2:102.5                        GI2:102.6
             HSRPIP:  102.7
GI3:103.5                        GI3:103.6
             HSRPIP:  103.7
          use standby 3 and track 3

telco1:PrimaryInt:
config t
Track 2 Int gi 1 line-protocol
Int gi 2
standby version 2
standby 2 ip 192.168.102.7
standby 2 preempt
standby 2 Priority 110
standby 2 track 2 decrement 70
END

telco2: Backup:
config t
Int gi 2
standby version 2
standby 2 ip 192.168.102.7
standby 2 preempt
standby 2 Priority 100
END

telco3: BackupOfBackup:
config t
Int gi 2
standby version 2
standby 2 ip 192.168.102.7
standby 2 preempt
standby 2 Priority 60
END

CONFIGURE REAL IP SLA: Service level agreement:
@Telco1:
config t
no ip sla 4
ip sla 4 
  icmp-echo 8.8.8.8
  freq 5
  exit
ip  sla  schedule 4 life forever start-time now
track  4  ip sla 4
  delay down 10 up 5
  exit
Int gi 2
NO standby 2 track 2 decrement 60
standby 2 track 4 decrement 60


@Telco2:
config t
no ip sla 4
ip sla 4 
  icmp-echo 8.8.8.8
  freq 5
  exit
ip  sla  schedule 4 life forever start-time now
track  4  ip sla 4
  delay down 10 up 5
  exit
Int gi 2
standby 2 track 4 decrement 50

GLBP with load balancing:

telco1:
config t
int gi3
glbp 10 ip 192.168.103.7
glbp 10 priority 120
glbp 10 preempt
glbp 10 load-balancing round-robin
glbp 10 timers 1 3
glbp 10 weighting 110 lower 90 upper 100
glbp 10 weighting track 4 decrement 15
!if R1 can’t reach 8.8.8.8, its weighting 
!drops below 100 and it relinquishes its Active role.

config t
! IP SLA config to monitor Internet
ip sla 1
 icmp-echo 8.8.8.8 source-interface GigabitEthernet1
 frequency 5
ip sla schedule 1 life forever start-time now

track 1 ip sla 1 reachability

int gi3
! Link GLBP weighting to tracking
glbp 10 weighting 120 lower 100 upper 120
glbp 10 weighting track 1 decrement 20


telco2:
config t
int gi3
glbp 10 ip 192.168.103.7
glbp 10 priority 110
glbp 10 preempt
glbp 10 load-balancing round-robin
glbp 10 timers 1 3
glbp 10 weighting 110 lower 90 upper 100
glbp 10 weighting track 4 decrement 15
!if R1 can’t reach 8.8.8.8, its weighting 
!drops below 100 and it relinquishes its Active role.

config t
! IP SLA to monitor Internet
ip sla 1
 icmp-echo 8.8.8.8 source-interface GigabitEthernet1
 frequency 5
ip sla schedule 1 life forever start-time now

track 1 ip sla 1 reachability

! Link GLBP weighting to tracking
int gi3
glbp 10 weighting 110 lower 90 upper 110
glbp 10 weighting track 1 decrement 20


telco3:
config t
int gi3
glbp 10 ip 192.168.103.7
glbp 10 priority 100
glbp 10 preempt
glbp 10 load-balancing round-robin
glbp 10 timers 1 3

config t
! IP SLA to monitor Internet
ip sla 1
 icmp-echo 8.8.8.8 source-interface GigabitEthernet1
 frequency 5
ip sla schedule 1 life forever start-time now

track 1 ip sla 1 reachability

! Link GLBP weighting to tracking
int gi 3
glbp 10 weighting 100 lower 80 upper 100
glbp 10 weighting track 1 decrement 20


show glbp
show glbp brief
show standby

show ip sla statistics

