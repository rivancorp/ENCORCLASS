ping 10.3.3.107
https://github.com/rivancorp/devop

task1: who wants to 180k to 350k/month?
AI + ML

TASK1: Prepare for automation:
@apps1a: devices with "ZeroDayConfig:"
config t
no logging console
line vty 0 14
 transport input all
 exec-timeout 0 0
int gi 1
 no shut
 ip add 192.168.108.6 255.255.255.0
 do wr

task2: install vscode extensions to make your programming heaven:

PythonForNetworkEngs
GitHub Copilot
Python Snippets
AREPL for python
Better Comments
Python Docstring Generator
Python Indent
Python Test Explorer

#upgrade your pip installer:
py -m pip install --upgrade pip
py -m pip install netmiko

TASK3: ENCOR CCNP LAB: NETFLOW LAB 1of3:
NetFlow tracks information such as:

* Source and destination IP addresses
* Source and destination ports
* IP protocol
* Type of service (ToS)
* Input and output interfaces
* Packet and byte counts
* Timestamps for the start and end of the flow

TASK4: HOW TO IMPLEMENT NETFLOW COLLECTION:

NETFLOW COLLECTION:
Components of NetFlow:

* NetFlow Exporter: Embedded in routers or switches to collect flow information and export it. apps1, and apps2  192.168.108.5//.6
* NetFlow Collector: A server that receives flow data from exporters and stores it for analysis. windows server: 192.168.108.1
* NetFlow Analyzer: Software that interprets and presents NetFlow data for network administrators. OPENSOURCE NETFLOW NTOPng:  192.168.108.2

ExamLab1: Create a default netflow exporter using Defualt collection:
APPS1: 
config t
flow exporter MyFlowExporter
 destination 192.168.108.1
 transport udp 2055
 export-protocol netflow-v9
end

NETFLOW LAB2: LEARN TO CREATE YOUR OWN NETFLOW configs:

stepONE: CONFIGURE AND VERIFY FLEXIBLE[ikaw nag custom] NETFLOW
APP1:
config t
	Flow record CCNPENCOR-CUSTOM-OUT
   	description CustomFlowforEncorLAB
	match ipv4 destination address
	match transport destination-port
	collect counter bytes
	collect counter packets
end
show flow record CCNPENCOR-CUSTOM-OUT

STEPtwo: CReate Flow Exporter:
config t
	flow exporter CCNP8-COLLECTOR-HOST 
        destination 192.168.108.1
	export-protocol netflow-v9 
        transport UDP 2055
	end
show flow exporter CCNP8-COLLECTOR-HOST

Step 3. Create Flow Monitor and associate Flow Records 
and Flow Exporters with it.  
config t
	flow monitor CCNP8-INBOUND-MONITOR
	record netflow ipv4 original-input 
	cache timeout active 30
	exporter CCNP8-COLLECTOR-HOST
	exit
        flow monitor CCNP8-OUTBOUND-MONITOR
	record CCNPENCOR-CUSTOM-OUT
	cache timeout active 30
	exporter CCNP8-COLLECTOR-HOST 
	exit
show flow monitor 

Step 4. Configure the appropriate interface:
config t
	interface gigabit 1
	ip flow monitor CCNP8-INBOUND-MONITOR input 
	ip flow monitor CCNP8-OUTBOUND-MONITOR output 

\\10.3.3.107\

task1: install netflow Collector on Winserver:
install all Ntopfiles

services.msc:
redis server
ntop
nprobe

http://localhost:3000

TASK1: configure netflow on cisco APPS1
to send netflow data to collector:windows


APPS1#show flow record 
flow record netflow-original:
  Description:        Traditional IPv4 input NetFlow with origin ASs
  No. of users:       0

TASK1: Learn create custom flows:
config t
	flow record CUSTOM-ENCORFLOW
	description NETFLOWnaGAWAKOmagIsa
 	match ipv4 destination address
	match transport destination-port
	collect counter bytes
	collect counter packets
	
TEST2: SEND flow records to windows Collector:
       mag sumbong sa windows:
config t
	flow exporter MyFlowExporter
        destination 192.168.108.2
        transport udp 2055
        export-protocol netflow-v9    

Task3: MAKE ROUTER VERY BUSY:
1. NETWORK TIME PROTOCOL:
config t
ip route 0.0.0.0  0.0.0.0  192.168.108.2
do ping 1.1.1.1
do ping 216.239.35.12
ntp server 216.239.35.12
end

task4: python for network Engineers:
GitHub Copilot
autoDocstring – Python Docstring 
Python Snippets
AREPL for python
Better Comments
Python Docstring Generator
Python Indent
Python Test Explorer

py -m pip install --upgrade pip

py -m pip install netmiko

TASK4: REAL WORLD CCNP HSRP:
         1.1.1.1/ 8.8.8.8



GI1:108.5                        GI1:108.6
APPS1                             APPS2
GI2:102.5                        GI2:102.6
             HSRPIP:  102.7
GI3:103.5                        GI3:103.6
             HSRPIP:  103.7
          use standby 3 and track 3

telco1:PrimaryInt:
config t
Track 2 Int gi 1 line-protocol
Int gi 2
standby version 2
standby 2 ip 192.168.102.7
standby 2 preempt
standby 2 Priority 110
standby 2 track 2 decrement 70
END

telco2: Backup:
config t
Int gi 2
standby version 2
standby 2 ip 192.168.102.7
standby 2 preempt
standby 2 Priority 100
END

telco3: BackupOfBackup:
config t
Int gi 2
standby version 2
standby 2 ip 192.168.102.7
standby 2 preempt
standby 2 Priority 60
END

CONFIGURE REAL IP SLA: Service level agreement:
@Telco1:
config t
no ip sla 4
ip sla 4 
  icmp-echo 8.8.8.8
  freq 5
  exit
ip  sla  schedule 4 life forever start-time now
track  4  ip sla 4
  delay down 10 up 5
  exit
Int gi 2
NO standby 2 track 2 decrement 60
standby 2 track 4 decrement 60


@Telco2:
config t
no ip sla 4
ip sla 4 
  icmp-echo 8.8.8.8
  freq 5
  exit
ip  sla  schedule 4 life forever start-time now
track  4  ip sla 4
  delay down 10 up 5
  exit
Int gi 2
standby 2 track 4 decrement 50

GLBP with load balancing:

telco1:
config t
int gi3
glbp 10 ip 192.168.103.7
glbp 10 priority 120
glbp 10 preempt
glbp 10 load-balancing round-robin
glbp 10 timers 1 3
glbp 10 weighting 110 lower 90 upper 100
glbp 10 weighting track 4 decrement 15
!if R1 can’t reach 8.8.8.8, its weighting 
!drops below 100 and it relinquishes its Active role.

config t
! IP SLA config to monitor Internet
ip sla 1
 icmp-echo 8.8.8.8 source-interface GigabitEthernet1
 frequency 5
ip sla schedule 1 life forever start-time now

track 1 ip sla 1 reachability

int gi3
! Link GLBP weighting to tracking
glbp 10 weighting 120 lower 100 upper 120
glbp 10 weighting track 1 decrement 20


telco2:
config t
int gi3
glbp 10 ip 192.168.103.7
glbp 10 priority 110
glbp 10 preempt
glbp 10 load-balancing round-robin
glbp 10 timers 1 3
glbp 10 weighting 110 lower 90 upper 100
glbp 10 weighting track 4 decrement 15
!if R1 can’t reach 8.8.8.8, its weighting 
!drops below 100 and it relinquishes its Active role.

config t
! IP SLA to monitor Internet
ip sla 1
 icmp-echo 8.8.8.8 source-interface GigabitEthernet1
 frequency 5
ip sla schedule 1 life forever start-time now

track 1 ip sla 1 reachability

! Link GLBP weighting to tracking
int gi3
glbp 10 weighting 110 lower 90 upper 110
glbp 10 weighting track 1 decrement 20


telco3:
config t
int gi3
glbp 10 ip 192.168.103.7
glbp 10 priority 100
glbp 10 preempt
glbp 10 load-balancing round-robin
glbp 10 timers 1 3

config t
! IP SLA to monitor Internet
ip sla 1
 icmp-echo 8.8.8.8 source-interface GigabitEthernet1
 frequency 5
ip sla schedule 1 life forever start-time now

track 1 ip sla 1 reachability

! Link GLBP weighting to tracking
int gi 3
glbp 10 weighting 100 lower 80 upper 100
glbp 10 weighting track 1 decrement 20


show glbp
show glbp brief
show standby
show ip sla statistics